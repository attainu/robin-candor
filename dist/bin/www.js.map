{"version":3,"sources":["../../src/bin/www.js"],"names":["debug","port","normalizePort","process","env","PORT","app","set","server","http","createServer","listen","console","log","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":"AAAA;;AAEA;;;AAIA;AACA;AACA;;;;;AACA;;AACA;;AACA;;AACA,IAAMA,KAAK,GAAG,uBAAS,eAAT,CAAd;AAEA;;;;AAIA,IAAMC,IAAI,GAAGC,aAAa,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;;AACAC,gBAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;AAEA;;;;;AAIA,IAAMO,MAAM,GAAGC,iBAAKC,YAAL,CAAkBJ,eAAlB,CAAf;AAEA;;;;;AAIAE,MAAM,CAACG,MAAP,CAAcV,IAAd,EAAoB;AAAA,SAAMW,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAAN;AAAA,CAApB;AACAL,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAP,MAAM,CAACM,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AAEA;;;;AAIA,SAASd,aAAT,CAAuBe,GAAvB,EAA4B;AAC1B,MAAMhB,IAAI,GAAGiB,QAAQ,CAACD,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAIE,KAAK,CAAClB,IAAD,CAAT,EAAiB;AACf;AACA,WAAOgB,GAAP;AACD;;AAED,MAAIhB,IAAI,IAAI,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;;AAIA,SAASc,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAME,IAAI,GAAG,OAAOrB,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,IAFd,CALsB,CAStB;;AACA,UAAQmB,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEX,MAAAA,OAAO,CAACQ,KAAR,CAAcE,IAAI,GAAG,+BAArB;AACAnB,MAAAA,OAAO,CAACqB,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACEZ,MAAAA,OAAO,CAACQ,KAAR,CAAcE,IAAI,GAAG,oBAArB;AACAnB,MAAAA,OAAO,CAACqB,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAMJ,KAAN;AAVJ;AAYD;AAED;;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAMS,IAAI,GAAGjB,MAAM,CAACkB,OAAP,EAAb;AACA,MAAMJ,IAAI,GAAG,OAAOG,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,IAAI,CAACxB,IAFnB;AAGAD,EAAAA,KAAK,CAAC,kBAAkBsB,IAAnB,CAAL;AACD","sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\n// var app = require('../app');\r\n// var debug = require('debug')('candor:server');\r\n// var http = require('http');\r\nimport app from '../app';\r\nimport debugLib from 'debug';\r\nimport http from 'http';\r\nconst debug = debugLib('candor:server');\r\n\r\n/**\r\n * Get port from environment and store in Express.\r\n */\r\n\r\nconst port = normalizePort(process.env.PORT || '3000');\r\napp.set('port', port);\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nconst server = http.createServer(app);\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port, () => console.log('Server started'));\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n  const port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (port >= 0) {\r\n    // port number\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  const bind = typeof port === 'string'\r\n    ? 'Pipe ' + port\r\n    : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n  const addr = server.address();\r\n  const bind = typeof addr === 'string'\r\n    ? 'pipe ' + addr\r\n    : 'port ' + addr.port;\r\n  debug('Listening on ' + bind);\r\n}\r\n"],"file":"www.js"}