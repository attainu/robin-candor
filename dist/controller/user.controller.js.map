{"version":3,"sources":["../../src/controller/user.controller.js"],"names":["dotenv","config","dict","image_url","imageContent","user_controller","createUser","req","res","user","redirect","errors","body","email","OTP","status","send","isEmpty","json","array","file","originalname","buffer","content","cloudinary","uploader","upload","err","imageResponse","console","log","secure_url","bcrypt","hash","password","hashed_password","entry","User","username","phone","save","message","render","login","findOne","data","msg","compare","accessToken","jwt","sign","name","img","process","env","jwt_key","cookie","maxAge","httpOnly","loginPage","signPage","request_otp","otp","generateOTP","clearInterval","clearOTP","main","nodemailer","createTestAccount","testAccount","transporter","createTransport","service","host","auth","email_otp_id","port","secure","pass","email_otp_password","sendMail","from","to","subject","text","html","info","then","error","submit_otp","query","logout","clearCookie","digits","i","Math","floor","random","key","setTimeout","module","exports"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACAA,mBAAOC,MAAP;;AAEA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,SAAJ;AACA,IAAIC,YAAJ;AAEA,IAAMC,eAAe,GAAG;AAEpBC,EAAAA,UAAU;AAAA,oGAAE,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJD,GAAG,CAACE,IADA;AAAA;AAAA;AAAA;;AAAA,+CAEGD,GAAG,CAACE,QAAJ,CAAa,GAAb,CAFH;;AAAA;AAIFC,cAAAA,MAJE,GAIO,wCAAiBJ,GAAjB,CAJP;;AAAA,oBAKJ,CAACL,IAAI,CAACK,GAAG,CAACK,IAAJ,CAASC,KAAV,CAAL,IAAyBX,IAAI,CAACK,GAAG,CAACK,IAAJ,CAASC,KAAV,CAAJ,CAAqB,CAArB,MAA4BN,GAAG,CAACK,IAAJ,CAASE,GAL1D;AAAA;AAAA;AAAA;;AAAA,+CAMGN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,YAArB,CANH;;AAAA;AAAA,kBASHL,MAAM,CAACM,OAAP,EATG;AAAA;AAAA;AAAA;;AAAA,+CAUGT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAACP,gBAAAA,MAAM,EAAEA,MAAM,CAACQ,KAAP;AAAT,eAArB,CAVH;;AAAA;AAYR;;AAZQ,mBAaJZ,GAAG,CAACa,IAbA;AAAA;AAAA;AAAA;;AAcJhB,cAAAA,YAAY,GAAG,kCAASG,GAAG,CAACa,IAAJ,CAASC,YAAlB,EAAgCd,GAAG,CAACa,IAAJ,CAASE,MAAzC,EAAiDC,OAAhE;AAdI;AAAA,qBAeEC,uBAAWC,QAAX,CAAoBC,MAApB,CAA2BtB,YAA3B,EAAyC,UAACuB,GAAD,EAAMC,aAAN,EAAwB;AACnE,oBAAID,GAAJ,EAASE,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAT,KACK;AACDxB,kBAAAA,SAAS,GAAGyB,aAAa,CAACG,UAA1B;AACAF,kBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC3B,SAAnC;AACH;AACJ,eANK,CAfF;;AAAA;AAAA;AAAA;AAAA,qBAyBwB6B,mBAAOC,IAAP,CAAY1B,GAAG,CAACK,IAAJ,CAASsB,QAArB,EAA+B,CAA/B,CAzBxB;;AAAA;AAyBAC,cAAAA,eAzBA;AA0BAC,cAAAA,KA1BA,GA0BQ,IAAIC,gBAAJ,CAAS;AACjBC,gBAAAA,QAAQ,EAAE/B,GAAG,CAACK,IAAJ,CAAS0B,QADF;AAEjBJ,gBAAAA,QAAQ,EAAEC,eAFO;AAGjBtB,gBAAAA,KAAK,EAAEN,GAAG,CAACK,IAAJ,CAASC,KAHC;AAIjB0B,gBAAAA,KAAK,EAAEhC,GAAG,CAACK,IAAJ,CAAS2B,KAJC;AAKjBpC,gBAAAA,SAAS,EAAEA;AALM,eAAT,CA1BR;;AAiCJ,kBAAG,CAACiC,KAAK,CAACjC,SAAV,EAAoB;AAChB,uBAAOiC,KAAK,CAACjC,SAAb;AACH;;AACD0B,cAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAA,cAAAA,KAAK,CAACI,IAAN,CAAW,UAAUb,GAAV,EAAe;AACtB,oBAAIA,GAAJ,EAAS;AACL;AACAnB,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,GAAG,CAACc,OAAzB;AACH,iBAHD,MAGO;AACH;AACAjC,kBAAAA,GAAG,CAACkC,MAAJ,CAAW,OAAX;AACH;AACJ,eARD;AArCI;AAAA;;AAAA;AAAA;AAAA;AA+CJlC,cAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;;AA/CI;AAiDR;;AAjDQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFU;AAsDpB2B,EAAAA,KAAK,EAAE,eAACpC,GAAD,EAAMC,GAAN,EAAc;AACjB,QAAID,GAAG,CAACE,IAAR,EAAc;AACV,aAAOD,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAP;AACH;;AACD,QAAI4B,QAAQ,GAAG/B,GAAG,CAACK,IAAJ,CAAS0B,QAAxB;AACA,QAAIJ,QAAQ,GAAG3B,GAAG,CAACK,IAAJ,CAASsB,QAAxB;;AACAG,qBAAKO,OAAL,CAAa;AAACN,MAAAA,QAAQ,EAARA;AAAD,KAAb;AAAA,+FAAyB,kBAAOX,GAAP,EAAYkB,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACjBlB,GADiB;AAAA;AAAA;AAAA;;AAEjB;AACAnB,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC8B,kBAAAA,GAAG,EAAE;AAAN,iBAArB;AAHiB;AAAA;;AAAA;AAAA,qBAMbD,IANa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAQCb,mBAAOe,OAAP,CAAeb,QAAf,EAAyBW,IAAI,CAACX,QAA9B,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASCc,gBAAAA,WATD,GASeC,yBAAIC,IAAJ,CAAS;AACzBC,kBAAAA,IAAI,EAAEb,QADmB;AAEzBc,kBAAAA,GAAG,EAAEP,IAAI,CAAC1C,SAFe;AAGzBU,kBAAAA,KAAK,EAAEgC,IAAI,CAAChC,KAHa;AAIzB0B,kBAAAA,KAAK,EAAEM,IAAI,CAACN;AAJa,iBAAT,EAKjBc,OAAO,CAACC,GAAR,CAAYC,OALK,CATf;AAeL/C,gBAAAA,GAAG,CAACgD,MAAJ,CAAW,UAAX,EAAuBR,WAAvB,EAAoC;AAACS,kBAAAA,MAAM,EAAE,OAAT;AAAkBC,kBAAAA,QAAQ,EAAE;AAA5B,iBAApC;AAfK,kDAgBElD,GAAG,CAACE,QAAJ,CAAa,GAAb,CAhBF;;AAAA;AAkBLF,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB;;AAlBK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBTa,gBAAAA,OAAO,CAACC,GAAR;AACAtB,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAArB;;AAtBS;AAAA;AAAA;;AAAA;AAyBb;AACAR,gBAAAA,GAAG,CAACE,QAAJ,CAAa,GAAb;;AA1Ba;AA4BpB;;AA5BoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzB;;AAAA;AAAA;AAAA;AAAA;AA8BH,GA1FmB;AA4FpBiD,EAAAA,SAAS,EAAE,mBAACpD,GAAD,EAAMC,GAAN,EAAc;AACrB,QAAID,GAAG,CAACE,IAAR,EAAc;AACV,aAAOD,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAP;AACH;;AACDF,IAAAA,GAAG,CAACkC,MAAJ,CAAW,OAAX;AACH,GAjGmB;AAkGpBkB,EAAAA,QAAQ,EAAE,kBAACrD,GAAD,EAAMC,GAAN,EAAc;AACpB,QAAID,GAAG,CAACE,IAAR,EAAc;AACV,aAAOD,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAP;AACH;;AACDF,IAAAA,GAAG,CAACkC,MAAJ,CAAW,QAAX;AACH,GAvGmB;AAwGpBmB,EAAAA,WAAW,EAAE,qBAACtD,GAAD,EAAMC,GAAN,EAAc;AACvB,QAAIK,KAAK,GAAGN,GAAG,CAACK,IAAJ,CAASC,KAArB;AACA,QAAIiD,GAAG,GAAGC,WAAW,EAArB;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ;;AACA,QAAI5D,IAAI,CAACW,KAAD,CAAR,EAAiB;AACbmD,MAAAA,aAAa,CAAC9D,IAAI,CAACW,KAAD,CAAJ,CAAY,CAAZ,CAAD,CAAb;AACA,aAAOX,IAAI,CAACW,KAAD,CAAX;AACH;;AACDX,IAAAA,IAAI,CAACW,KAAD,CAAJ,GAAc,CAACiD,GAAD,EAAMG,QAAQ,CAAC/D,IAAD,EAAOW,KAAP,CAAd,CAAd;;AARuB,aAURqD,IAVQ;AAAA;AAAA;;AAAA;AAAA,4FAUvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC4BC,uBAAWC,iBAAX,EAD5B;;AAAA;AACQC,gBAAAA,WADR;AAEQC,gBAAAA,WAFR,GAEsBH,uBAAWI,eAAX,CAA2B;AACzCC,kBAAAA,OAAO,EAAE,OADgC;AAEzCC,kBAAAA,IAAI,EAAE,gBAFmC;AAGzCC,kBAAAA,IAAI,EAAE;AACFjE,oBAAAA,IAAI,EAAE4C,OAAO,CAACC,GAAR,CAAYqB,YADhB;AAEFC,oBAAAA,IAAI,EAAE,GAFJ;AAGFC,oBAAAA,MAAM,EAAE,IAHN;AAIFC,oBAAAA,IAAI,EAAEzB,OAAO,CAACC,GAAR,CAAYyB;AAJhB;AAHmC,iBAA3B,CAFtB;AAAA;AAAA,uBAaqBT,WAAW,CAACU,QAAZ,CAAqB;AAClCC,kBAAAA,IAAI,EAAE,SAD4B;AAElCC,kBAAAA,EAAE,EAAErE,KAF8B;AAGlCsE,kBAAAA,OAAO,EAAE,iBAHyB;AAIlCC,kBAAAA,IAAI,uDAAgDtB,GAAhD,yCAJ8B;AAI6D;AAC/FuB,kBAAAA,IAAI,oDAA6CvB,GAA7C,gDAL8B,CAKgE;;AALhE,iBAArB,CAbrB;;AAAA;AAaQwB,gBAAAA,IAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAVuB;AAAA;AAAA;;AAgCvBpB,IAAAA,IAAI,GAAGqB,IAAP,CAAY;AAAA,aAAM/E,GAAG,CAACQ,IAAJ,CAAS,UAAT,CAAN;AAAA,KAAZ,WAA8C,YAAM;AAChDa,MAAAA,OAAO,CAAC2D,KAAR;AACH,KAFD;AAGH,GA3ImB;AA4IpBC,EAAAA,UAAU,EAAE,oBAAClF,GAAD,EAAMC,GAAN,EAAc;AACtB,QAAIsD,GAAG,GAAGvD,GAAG,CAACmF,KAAJ,CAAU5B,GAApB;AACA,QAAIjD,KAAK,GAAGN,GAAG,CAACmF,KAAJ,CAAU7E,KAAtB;;AACA,QAAIX,IAAI,CAACW,KAAD,CAAJ,IAAeX,IAAI,CAACW,KAAD,CAAJ,CAAY,CAAZ,MAAmBiD,GAAtC,EAA2C;AACvCtD,MAAAA,GAAG,CAACQ,IAAJ,CAAS,cAAT;AACH,KAFD,MAEO;AACHR,MAAAA,GAAG,CAACQ,IAAJ,CAAS,WAAT;AACH;AACJ,GApJmB;AAqJpB2E,EAAAA,MAAM,EAAE,gBAACpF,GAAD,EAAMC,GAAN,EAAc;AAClBA,IAAAA,GAAG,CAACoF,WAAJ,CAAgB,UAAhB;AACApF,IAAAA,GAAG,CAACkC,MAAJ,CAAW,YAAX;AACH;AAxJmB,CAAxB;;AA4JA,SAASqB,WAAT,GAAuB;AACnB,MAAI8B,MAAM,GAAG,YAAb;AACA,MAAI/E,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBhF,IAAAA,GAAG,IAAI+E,MAAM,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAb;AACH;;AACD,SAAOnF,GAAP;AACH;;AAED,SAASmD,QAAT,CAAkB/D,IAAlB,EAAwBgG,GAAxB,EAA6B;AACzB,SAAOC,UAAU,CAAC,YAAM;AACpB,WAAOjG,IAAI,CAACgG,GAAD,CAAX;AACH,GAFgB,EAEd,OAAO,EAAP,GAAY,EAFE,CAAjB;AAGH;;AAEDE,MAAM,CAACC,OAAP,GAAiBhG,eAAjB","sourcesContent":["import User from '../model/user.model';\r\nimport {validationResult} from 'express-validator';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport nodemailer from 'nodemailer';\r\nimport dotenv from 'dotenv';\r\nimport cloudinary from '../utils/cloudinary';\r\nimport buff2Str from '../utils/convertBuffToStr';\r\ndotenv.config();\r\n\r\nlet dict = {};\r\nlet image_url;\r\nlet imageContent;\r\n\r\nconst user_controller = {\r\n\r\n    createUser: async (req, res) => {\r\n        if (req.user) {\r\n            return res.redirect('/');\r\n        }\r\n        const errors = validationResult(req);\r\n        if (!dict[req.body.email] || dict[req.body.email][0] !== req.body.OTP) {\r\n            return res.status(400).send('Wrong OTP ');\r\n        }\r\n\r\n        if (!errors.isEmpty()) {\r\n            return res.status(422).json({errors: errors.array()});\r\n        }\r\n        ;\r\n        if (req.file) {\r\n            imageContent = buff2Str(req.file.originalname, req.file.buffer).content;\r\n            await cloudinary.uploader.upload(imageContent, (err, imageResponse) => {\r\n                if (err) console.log(err);\r\n                else {\r\n                    image_url = imageResponse.secure_url;\r\n                    console.log('log from cloudinary', image_url)\r\n                }\r\n            });\r\n\r\n        }\r\n        try {\r\n            let hashed_password = await bcrypt.hash(req.body.password, 5);\r\n            let entry = new User({\r\n                username: req.body.username,\r\n                password: hashed_password,\r\n                email: req.body.email,\r\n                phone: req.body.phone,\r\n                image_url: image_url\r\n            });\r\n            if(!entry.image_url){\r\n                delete entry.image_url;\r\n            }\r\n            console.log(entry);\r\n            entry.save(function (err) {\r\n                if (err) {\r\n                    // not acceptable\r\n                    res.status(406).send(err.message);\r\n                } else {\r\n                    // created\r\n                    res.render('login');\r\n                }\r\n            });\r\n        } catch {\r\n            res.status(500).send('Internal error occured')\r\n        }\r\n        ;\r\n    },\r\n\r\n    login: (req, res) => {\r\n        if (req.user) {\r\n            return res.redirect('/');\r\n        }\r\n        let username = req.body.username;\r\n        let password = req.body.password;\r\n        User.findOne({username}, async (err, data) => {\r\n            if (err) {\r\n                // Internal server error\r\n                res.status(500).send({msg: \"Internal Server Error\"});\r\n            } else {\r\n                // OK\r\n                if (data) {\r\n                    try {\r\n                        if (await bcrypt.compare(password, data.password)) {\r\n                            const accessToken = jwt.sign({\r\n                                name: username,\r\n                                img: data.image_url,\r\n                                email: data.email,\r\n                                phone: data.phone\r\n                            }, process.env.jwt_key);\r\n                            res.cookie('awtToken', accessToken, {maxAge: 9000000, httpOnly: true});\r\n                            return res.redirect('/');\r\n                        } else {\r\n                            res.status(401).send('Unauthorized access');\r\n                        }\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                        res.status(400).send('Bad request');\r\n                    }\r\n                } else {\r\n                    // no data\r\n                    res.redirect('/');\r\n                }\r\n            };\r\n        });\r\n    },\r\n\r\n    loginPage: (req, res) => {\r\n        if (req.user) {\r\n            return res.redirect('/');\r\n        }\r\n        res.render('login');\r\n    },\r\n    signPage: (req, res) => {\r\n        if (req.user) {\r\n            return res.redirect('/');\r\n        }\r\n        res.render('signUp');\r\n    },\r\n    request_otp: (req, res) => {\r\n        let email = req.body.email;\r\n        let otp = generateOTP();\r\n        console.log(otp);\r\n        if (dict[email]) {\r\n            clearInterval(dict[email][1]);\r\n            delete dict[email];\r\n        }\r\n        dict[email] = [otp, clearOTP(dict, email)];\r\n\r\n        async function main() {\r\n            let testAccount = await nodemailer.createTestAccount();\r\n            let transporter = nodemailer.createTransport({\r\n                service: 'gmail',\r\n                host: 'smtp.gmail.com',\r\n                auth: {\r\n                    user: process.env.email_otp_id,\r\n                    port: 465,\r\n                    secure: true,\r\n                    pass: process.env.email_otp_password,\r\n                },\r\n            });\r\n\r\n            let info = await transporter.sendMail({\r\n                from: \"Candor \",\r\n                to: email,\r\n                subject: \"OTP from Candor\",\r\n                text: `For sign up to Candor, please use this OTP ${otp}. This OTP will be valid for 30 mins`, // plain text body\r\n                html: `<b><H2>For sign up, please use this OTP ${otp}</H2><br> OTP will be valid for 30 mins</b>` // html body\r\n            });\r\n        }\r\n\r\n        main().then(() => res.send('OTP sent')).catch(() => {\r\n            console.error();\r\n        })\r\n    },\r\n    submit_otp: (req, res) => {\r\n        let otp = req.query.otp;\r\n        let email = req.query.email;\r\n        if (dict[email] && dict[email][0] === otp) {\r\n            res.send('OTP verified')\r\n        } else {\r\n            res.send('Wrong OTP');\r\n        }\r\n    },\r\n    logout: (req, res) => {\r\n        res.clearCookie('awtToken')\r\n        res.render('logged_out')\r\n    }\r\n};\r\n\r\n\r\nfunction generateOTP() {\r\n    let digits = '0123456789';\r\n    let OTP = '';\r\n    for (let i = 0; i < 6; i++) {\r\n        OTP += digits[Math.floor(Math.random() * 10)];\r\n    }\r\n    return OTP;\r\n}\r\n\r\nfunction clearOTP(dict, key) {\r\n    return setTimeout(() => {\r\n        delete dict[key];\r\n    }, 1000 * 60 * 30);\r\n}\r\n\r\nmodule.exports = user_controller;\r\n"],"file":"user.controller.js"}